// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mars_rover.proto
#ifndef GRPC_mars_5frover_2eproto__INCLUDED
#define GRPC_mars_5frover_2eproto__INCLUDED

#include "mars_rover.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace marsrover {

class RoverService final {
 public:
  static constexpr char const* service_full_name() {
    return "marsrover.RoverService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Commands
    // Locomotion
    virtual ::grpc::Status DriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncDriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncDriveForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncDriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncDriveForwardRaw(context, request, cq));
    }
    virtual ::grpc::Status Reverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncReverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncReverseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncReverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncReverseRaw(context, request, cq));
    }
    virtual ::grpc::Status TurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncTurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncTurnLeftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncTurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncTurnLeftRaw(context, request, cq));
    }
    virtual ::grpc::Status TurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncTurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncTurnRightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncTurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncTurnRightRaw(context, request, cq));
    }
    virtual ::grpc::Status TurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncTurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncTurnOnSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncTurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncTurnOnSpotRaw(context, request, cq));
    }
    // POV
    virtual ::grpc::Status RotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncRotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncRotatePeriscopeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncRotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncRotatePeriscopeRaw(context, request, cq));
    }
    virtual ::grpc::Status ControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncControlHeadlightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncControlHeadlightsRaw(context, request, cq));
    }
    virtual ::grpc::Status ControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::marsrover::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> AsyncControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(AsyncControlWheelLEDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>> PrepareAsyncControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>>(PrepareAsyncControlWheelLEDsRaw(context, request, cq));
    }
    // Measurements
    virtual ::grpc::Status GetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::marsrover::UltrasoundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::UltrasoundResponse>> AsyncGetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::UltrasoundResponse>>(AsyncGetUltrasoundMeasurementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::UltrasoundResponse>> PrepareAsyncGetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::UltrasoundResponse>>(PrepareAsyncGetUltrasoundMeasurementRaw(context, request, cq));
    }
    // Camera
    // New service to get the camera stream URL
    virtual ::grpc::Status GetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::marsrover::CameraStreamResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CameraStreamResponse>> AsyncGetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CameraStreamResponse>>(AsyncGetCameraStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CameraStreamResponse>> PrepareAsyncGetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CameraStreamResponse>>(PrepareAsyncGetCameraStreamRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Commands
      // Locomotion
      virtual void DriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Reverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // POV
      virtual void RotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Measurements
      virtual void GetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest* request, ::marsrover::UltrasoundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest* request, ::marsrover::UltrasoundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Camera
      // New service to get the camera stream URL
      virtual void GetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest* request, ::marsrover::CameraStreamResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest* request, ::marsrover::CameraStreamResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncDriveForwardRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncDriveForwardRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncReverseRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncReverseRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncTurnLeftRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncTurnLeftRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncTurnRightRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncTurnRightRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncTurnOnSpotRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncTurnOnSpotRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncRotatePeriscopeRaw(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncRotatePeriscopeRaw(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncControlHeadlightsRaw(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncControlHeadlightsRaw(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* AsyncControlWheelLEDsRaw(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CommandResponse>* PrepareAsyncControlWheelLEDsRaw(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::UltrasoundResponse>* AsyncGetUltrasoundMeasurementRaw(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::UltrasoundResponse>* PrepareAsyncGetUltrasoundMeasurementRaw(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CameraStreamResponse>* AsyncGetCameraStreamRaw(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marsrover::CameraStreamResponse>* PrepareAsyncGetCameraStreamRaw(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncDriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncDriveForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncDriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncDriveForwardRaw(context, request, cq));
    }
    ::grpc::Status Reverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncReverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncReverseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncReverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncReverseRaw(context, request, cq));
    }
    ::grpc::Status TurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncTurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncTurnLeftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncTurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncTurnLeftRaw(context, request, cq));
    }
    ::grpc::Status TurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncTurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncTurnRightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncTurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncTurnRightRaw(context, request, cq));
    }
    ::grpc::Status TurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncTurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncTurnOnSpotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncTurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncTurnOnSpotRaw(context, request, cq));
    }
    ::grpc::Status RotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncRotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncRotatePeriscopeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncRotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncRotatePeriscopeRaw(context, request, cq));
    }
    ::grpc::Status ControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncControlHeadlightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncControlHeadlightsRaw(context, request, cq));
    }
    ::grpc::Status ControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::marsrover::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> AsyncControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(AsyncControlWheelLEDsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>> PrepareAsyncControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>>(PrepareAsyncControlWheelLEDsRaw(context, request, cq));
    }
    ::grpc::Status GetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::marsrover::UltrasoundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::UltrasoundResponse>> AsyncGetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::UltrasoundResponse>>(AsyncGetUltrasoundMeasurementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::UltrasoundResponse>> PrepareAsyncGetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::UltrasoundResponse>>(PrepareAsyncGetUltrasoundMeasurementRaw(context, request, cq));
    }
    ::grpc::Status GetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::marsrover::CameraStreamResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CameraStreamResponse>> AsyncGetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CameraStreamResponse>>(AsyncGetCameraStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CameraStreamResponse>> PrepareAsyncGetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marsrover::CameraStreamResponse>>(PrepareAsyncGetCameraStreamRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DriveForward(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Reverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void Reverse(::grpc::ClientContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void TurnLeft(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void TurnRight(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void TurnOnSpot(::grpc::ClientContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void RotatePeriscope(::grpc::ClientContext* context, const ::marsrover::RotateRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void ControlHeadlights(::grpc::ClientContext* context, const ::marsrover::LEDRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest* request, ::marsrover::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void ControlWheelLEDs(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest* request, ::marsrover::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest* request, ::marsrover::UltrasoundResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUltrasoundMeasurement(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest* request, ::marsrover::UltrasoundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest* request, ::marsrover::CameraStreamResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCameraStream(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest* request, ::marsrover::CameraStreamResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncDriveForwardRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncDriveForwardRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncReverseRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncReverseRaw(::grpc::ClientContext* context, const ::marsrover::DriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncTurnLeftRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncTurnLeftRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncTurnRightRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncTurnRightRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncTurnOnSpotRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncTurnOnSpotRaw(::grpc::ClientContext* context, const ::marsrover::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncRotatePeriscopeRaw(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncRotatePeriscopeRaw(::grpc::ClientContext* context, const ::marsrover::RotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncControlHeadlightsRaw(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncControlHeadlightsRaw(::grpc::ClientContext* context, const ::marsrover::LEDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* AsyncControlWheelLEDsRaw(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CommandResponse>* PrepareAsyncControlWheelLEDsRaw(::grpc::ClientContext* context, const ::marsrover::WheelLEDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::UltrasoundResponse>* AsyncGetUltrasoundMeasurementRaw(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::UltrasoundResponse>* PrepareAsyncGetUltrasoundMeasurementRaw(::grpc::ClientContext* context, const ::marsrover::UltrasoundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CameraStreamResponse>* AsyncGetCameraStreamRaw(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marsrover::CameraStreamResponse>* PrepareAsyncGetCameraStreamRaw(::grpc::ClientContext* context, const ::marsrover::CameraStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DriveForward_;
    const ::grpc::internal::RpcMethod rpcmethod_Reverse_;
    const ::grpc::internal::RpcMethod rpcmethod_TurnLeft_;
    const ::grpc::internal::RpcMethod rpcmethod_TurnRight_;
    const ::grpc::internal::RpcMethod rpcmethod_TurnOnSpot_;
    const ::grpc::internal::RpcMethod rpcmethod_RotatePeriscope_;
    const ::grpc::internal::RpcMethod rpcmethod_ControlHeadlights_;
    const ::grpc::internal::RpcMethod rpcmethod_ControlWheelLEDs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUltrasoundMeasurement_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCameraStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Commands
    // Locomotion
    virtual ::grpc::Status DriveForward(::grpc::ServerContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response);
    virtual ::grpc::Status Reverse(::grpc::ServerContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response);
    virtual ::grpc::Status TurnLeft(::grpc::ServerContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response);
    virtual ::grpc::Status TurnRight(::grpc::ServerContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response);
    virtual ::grpc::Status TurnOnSpot(::grpc::ServerContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response);
    // POV
    virtual ::grpc::Status RotatePeriscope(::grpc::ServerContext* context, const ::marsrover::RotateRequest* request, ::marsrover::CommandResponse* response);
    virtual ::grpc::Status ControlHeadlights(::grpc::ServerContext* context, const ::marsrover::LEDRequest* request, ::marsrover::CommandResponse* response);
    virtual ::grpc::Status ControlWheelLEDs(::grpc::ServerContext* context, const ::marsrover::WheelLEDRequest* request, ::marsrover::CommandResponse* response);
    // Measurements
    virtual ::grpc::Status GetUltrasoundMeasurement(::grpc::ServerContext* context, const ::marsrover::UltrasoundRequest* request, ::marsrover::UltrasoundResponse* response);
    // Camera
    // New service to get the camera stream URL
    virtual ::grpc::Status GetCameraStream(::grpc::ServerContext* context, const ::marsrover::CameraStreamRequest* request, ::marsrover::CameraStreamResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DriveForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DriveForward() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DriveForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DriveForward(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDriveForward(::grpc::ServerContext* context, ::marsrover::DriveRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reverse() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Reverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reverse(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReverse(::grpc::ServerContext* context, ::marsrover::DriveRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TurnLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TurnLeft() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TurnLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnLeft(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTurnLeft(::grpc::ServerContext* context, ::marsrover::TurnRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TurnRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TurnRight() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TurnRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnRight(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTurnRight(::grpc::ServerContext* context, ::marsrover::TurnRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TurnOnSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TurnOnSpot() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TurnOnSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnOnSpot(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTurnOnSpot(::grpc::ServerContext* context, ::marsrover::TurnRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RotatePeriscope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RotatePeriscope() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RotatePeriscope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotatePeriscope(::grpc::ServerContext* /*context*/, const ::marsrover::RotateRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotatePeriscope(::grpc::ServerContext* context, ::marsrover::RotateRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlHeadlights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ControlHeadlights() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ControlHeadlights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlHeadlights(::grpc::ServerContext* /*context*/, const ::marsrover::LEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlHeadlights(::grpc::ServerContext* context, ::marsrover::LEDRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlWheelLEDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ControlWheelLEDs() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ControlWheelLEDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlWheelLEDs(::grpc::ServerContext* /*context*/, const ::marsrover::WheelLEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlWheelLEDs(::grpc::ServerContext* context, ::marsrover::WheelLEDRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUltrasoundMeasurement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUltrasoundMeasurement() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetUltrasoundMeasurement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUltrasoundMeasurement(::grpc::ServerContext* /*context*/, const ::marsrover::UltrasoundRequest* /*request*/, ::marsrover::UltrasoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUltrasoundMeasurement(::grpc::ServerContext* context, ::marsrover::UltrasoundRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::UltrasoundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCameraStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCameraStream() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetCameraStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraStream(::grpc::ServerContext* /*context*/, const ::marsrover::CameraStreamRequest* /*request*/, ::marsrover::CameraStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraStream(::grpc::ServerContext* context, ::marsrover::CameraStreamRequest* request, ::grpc::ServerAsyncResponseWriter< ::marsrover::CameraStreamResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DriveForward<WithAsyncMethod_Reverse<WithAsyncMethod_TurnLeft<WithAsyncMethod_TurnRight<WithAsyncMethod_TurnOnSpot<WithAsyncMethod_RotatePeriscope<WithAsyncMethod_ControlHeadlights<WithAsyncMethod_ControlWheelLEDs<WithAsyncMethod_GetUltrasoundMeasurement<WithAsyncMethod_GetCameraStream<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DriveForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DriveForward() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::DriveRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response) { return this->DriveForward(context, request, response); }));}
    void SetMessageAllocatorFor_DriveForward(
        ::grpc::MessageAllocator< ::marsrover::DriveRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::DriveRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DriveForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DriveForward(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DriveForward(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Reverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Reverse() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::DriveRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::DriveRequest* request, ::marsrover::CommandResponse* response) { return this->Reverse(context, request, response); }));}
    void SetMessageAllocatorFor_Reverse(
        ::grpc::MessageAllocator< ::marsrover::DriveRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::DriveRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Reverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reverse(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reverse(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TurnLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TurnLeft() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::TurnRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response) { return this->TurnLeft(context, request, response); }));}
    void SetMessageAllocatorFor_TurnLeft(
        ::grpc::MessageAllocator< ::marsrover::TurnRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::TurnRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TurnLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnLeft(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TurnLeft(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TurnRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TurnRight() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::TurnRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response) { return this->TurnRight(context, request, response); }));}
    void SetMessageAllocatorFor_TurnRight(
        ::grpc::MessageAllocator< ::marsrover::TurnRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::TurnRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TurnRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnRight(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TurnRight(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TurnOnSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TurnOnSpot() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::TurnRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::TurnRequest* request, ::marsrover::CommandResponse* response) { return this->TurnOnSpot(context, request, response); }));}
    void SetMessageAllocatorFor_TurnOnSpot(
        ::grpc::MessageAllocator< ::marsrover::TurnRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::TurnRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TurnOnSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnOnSpot(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TurnOnSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RotatePeriscope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RotatePeriscope() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::RotateRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::RotateRequest* request, ::marsrover::CommandResponse* response) { return this->RotatePeriscope(context, request, response); }));}
    void SetMessageAllocatorFor_RotatePeriscope(
        ::grpc::MessageAllocator< ::marsrover::RotateRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::RotateRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RotatePeriscope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotatePeriscope(::grpc::ServerContext* /*context*/, const ::marsrover::RotateRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RotatePeriscope(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::RotateRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ControlHeadlights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ControlHeadlights() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::LEDRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::LEDRequest* request, ::marsrover::CommandResponse* response) { return this->ControlHeadlights(context, request, response); }));}
    void SetMessageAllocatorFor_ControlHeadlights(
        ::grpc::MessageAllocator< ::marsrover::LEDRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::LEDRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ControlHeadlights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlHeadlights(::grpc::ServerContext* /*context*/, const ::marsrover::LEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ControlHeadlights(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::LEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ControlWheelLEDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ControlWheelLEDs() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::WheelLEDRequest, ::marsrover::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::WheelLEDRequest* request, ::marsrover::CommandResponse* response) { return this->ControlWheelLEDs(context, request, response); }));}
    void SetMessageAllocatorFor_ControlWheelLEDs(
        ::grpc::MessageAllocator< ::marsrover::WheelLEDRequest, ::marsrover::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::WheelLEDRequest, ::marsrover::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ControlWheelLEDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlWheelLEDs(::grpc::ServerContext* /*context*/, const ::marsrover::WheelLEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ControlWheelLEDs(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::WheelLEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUltrasoundMeasurement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUltrasoundMeasurement() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::UltrasoundRequest, ::marsrover::UltrasoundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::UltrasoundRequest* request, ::marsrover::UltrasoundResponse* response) { return this->GetUltrasoundMeasurement(context, request, response); }));}
    void SetMessageAllocatorFor_GetUltrasoundMeasurement(
        ::grpc::MessageAllocator< ::marsrover::UltrasoundRequest, ::marsrover::UltrasoundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::UltrasoundRequest, ::marsrover::UltrasoundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUltrasoundMeasurement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUltrasoundMeasurement(::grpc::ServerContext* /*context*/, const ::marsrover::UltrasoundRequest* /*request*/, ::marsrover::UltrasoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUltrasoundMeasurement(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::UltrasoundRequest* /*request*/, ::marsrover::UltrasoundResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCameraStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCameraStream() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::marsrover::CameraStreamRequest, ::marsrover::CameraStreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marsrover::CameraStreamRequest* request, ::marsrover::CameraStreamResponse* response) { return this->GetCameraStream(context, request, response); }));}
    void SetMessageAllocatorFor_GetCameraStream(
        ::grpc::MessageAllocator< ::marsrover::CameraStreamRequest, ::marsrover::CameraStreamResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marsrover::CameraStreamRequest, ::marsrover::CameraStreamResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCameraStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraStream(::grpc::ServerContext* /*context*/, const ::marsrover::CameraStreamRequest* /*request*/, ::marsrover::CameraStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraStream(
      ::grpc::CallbackServerContext* /*context*/, const ::marsrover::CameraStreamRequest* /*request*/, ::marsrover::CameraStreamResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DriveForward<WithCallbackMethod_Reverse<WithCallbackMethod_TurnLeft<WithCallbackMethod_TurnRight<WithCallbackMethod_TurnOnSpot<WithCallbackMethod_RotatePeriscope<WithCallbackMethod_ControlHeadlights<WithCallbackMethod_ControlWheelLEDs<WithCallbackMethod_GetUltrasoundMeasurement<WithCallbackMethod_GetCameraStream<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DriveForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DriveForward() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DriveForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DriveForward(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reverse() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Reverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reverse(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TurnLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TurnLeft() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TurnLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnLeft(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TurnRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TurnRight() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TurnRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnRight(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TurnOnSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TurnOnSpot() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TurnOnSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnOnSpot(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RotatePeriscope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RotatePeriscope() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RotatePeriscope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotatePeriscope(::grpc::ServerContext* /*context*/, const ::marsrover::RotateRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ControlHeadlights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ControlHeadlights() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ControlHeadlights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlHeadlights(::grpc::ServerContext* /*context*/, const ::marsrover::LEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ControlWheelLEDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ControlWheelLEDs() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ControlWheelLEDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlWheelLEDs(::grpc::ServerContext* /*context*/, const ::marsrover::WheelLEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUltrasoundMeasurement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUltrasoundMeasurement() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetUltrasoundMeasurement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUltrasoundMeasurement(::grpc::ServerContext* /*context*/, const ::marsrover::UltrasoundRequest* /*request*/, ::marsrover::UltrasoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCameraStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCameraStream() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetCameraStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraStream(::grpc::ServerContext* /*context*/, const ::marsrover::CameraStreamRequest* /*request*/, ::marsrover::CameraStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DriveForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DriveForward() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DriveForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DriveForward(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDriveForward(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reverse() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Reverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reverse(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReverse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TurnLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TurnLeft() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TurnLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnLeft(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTurnLeft(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TurnRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TurnRight() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TurnRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnRight(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTurnRight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TurnOnSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TurnOnSpot() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TurnOnSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnOnSpot(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTurnOnSpot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RotatePeriscope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RotatePeriscope() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RotatePeriscope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotatePeriscope(::grpc::ServerContext* /*context*/, const ::marsrover::RotateRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotatePeriscope(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlHeadlights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ControlHeadlights() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ControlHeadlights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlHeadlights(::grpc::ServerContext* /*context*/, const ::marsrover::LEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlHeadlights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlWheelLEDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ControlWheelLEDs() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ControlWheelLEDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlWheelLEDs(::grpc::ServerContext* /*context*/, const ::marsrover::WheelLEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlWheelLEDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUltrasoundMeasurement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUltrasoundMeasurement() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetUltrasoundMeasurement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUltrasoundMeasurement(::grpc::ServerContext* /*context*/, const ::marsrover::UltrasoundRequest* /*request*/, ::marsrover::UltrasoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUltrasoundMeasurement(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCameraStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCameraStream() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetCameraStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraStream(::grpc::ServerContext* /*context*/, const ::marsrover::CameraStreamRequest* /*request*/, ::marsrover::CameraStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DriveForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DriveForward() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DriveForward(context, request, response); }));
    }
    ~WithRawCallbackMethod_DriveForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DriveForward(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DriveForward(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Reverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Reverse() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reverse(context, request, response); }));
    }
    ~WithRawCallbackMethod_Reverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reverse(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reverse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TurnLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TurnLeft() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TurnLeft(context, request, response); }));
    }
    ~WithRawCallbackMethod_TurnLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnLeft(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TurnLeft(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TurnRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TurnRight() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TurnRight(context, request, response); }));
    }
    ~WithRawCallbackMethod_TurnRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnRight(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TurnRight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TurnOnSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TurnOnSpot() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TurnOnSpot(context, request, response); }));
    }
    ~WithRawCallbackMethod_TurnOnSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TurnOnSpot(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TurnOnSpot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RotatePeriscope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RotatePeriscope() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RotatePeriscope(context, request, response); }));
    }
    ~WithRawCallbackMethod_RotatePeriscope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RotatePeriscope(::grpc::ServerContext* /*context*/, const ::marsrover::RotateRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RotatePeriscope(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ControlHeadlights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ControlHeadlights() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ControlHeadlights(context, request, response); }));
    }
    ~WithRawCallbackMethod_ControlHeadlights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlHeadlights(::grpc::ServerContext* /*context*/, const ::marsrover::LEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ControlHeadlights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ControlWheelLEDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ControlWheelLEDs() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ControlWheelLEDs(context, request, response); }));
    }
    ~WithRawCallbackMethod_ControlWheelLEDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlWheelLEDs(::grpc::ServerContext* /*context*/, const ::marsrover::WheelLEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ControlWheelLEDs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUltrasoundMeasurement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUltrasoundMeasurement() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUltrasoundMeasurement(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUltrasoundMeasurement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUltrasoundMeasurement(::grpc::ServerContext* /*context*/, const ::marsrover::UltrasoundRequest* /*request*/, ::marsrover::UltrasoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUltrasoundMeasurement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCameraStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCameraStream() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCameraStream(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCameraStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraStream(::grpc::ServerContext* /*context*/, const ::marsrover::CameraStreamRequest* /*request*/, ::marsrover::CameraStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DriveForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DriveForward() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::DriveRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::DriveRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedDriveForward(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DriveForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DriveForward(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDriveForward(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::DriveRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reverse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reverse() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::DriveRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::DriveRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedReverse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reverse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reverse(::grpc::ServerContext* /*context*/, const ::marsrover::DriveRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReverse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::DriveRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TurnLeft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TurnLeft() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::TurnRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::TurnRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedTurnLeft(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TurnLeft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TurnLeft(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTurnLeft(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::TurnRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TurnRight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TurnRight() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::TurnRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::TurnRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedTurnRight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TurnRight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TurnRight(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTurnRight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::TurnRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TurnOnSpot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TurnOnSpot() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::TurnRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::TurnRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedTurnOnSpot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TurnOnSpot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TurnOnSpot(::grpc::ServerContext* /*context*/, const ::marsrover::TurnRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTurnOnSpot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::TurnRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RotatePeriscope : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RotatePeriscope() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::RotateRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::RotateRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedRotatePeriscope(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RotatePeriscope() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RotatePeriscope(::grpc::ServerContext* /*context*/, const ::marsrover::RotateRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRotatePeriscope(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::RotateRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ControlHeadlights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ControlHeadlights() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::LEDRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::LEDRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedControlHeadlights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ControlHeadlights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ControlHeadlights(::grpc::ServerContext* /*context*/, const ::marsrover::LEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedControlHeadlights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::LEDRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ControlWheelLEDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ControlWheelLEDs() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::WheelLEDRequest, ::marsrover::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::WheelLEDRequest, ::marsrover::CommandResponse>* streamer) {
                       return this->StreamedControlWheelLEDs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ControlWheelLEDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ControlWheelLEDs(::grpc::ServerContext* /*context*/, const ::marsrover::WheelLEDRequest* /*request*/, ::marsrover::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedControlWheelLEDs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::WheelLEDRequest,::marsrover::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUltrasoundMeasurement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUltrasoundMeasurement() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::UltrasoundRequest, ::marsrover::UltrasoundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::UltrasoundRequest, ::marsrover::UltrasoundResponse>* streamer) {
                       return this->StreamedGetUltrasoundMeasurement(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUltrasoundMeasurement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUltrasoundMeasurement(::grpc::ServerContext* /*context*/, const ::marsrover::UltrasoundRequest* /*request*/, ::marsrover::UltrasoundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUltrasoundMeasurement(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::UltrasoundRequest,::marsrover::UltrasoundResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCameraStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCameraStream() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marsrover::CameraStreamRequest, ::marsrover::CameraStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marsrover::CameraStreamRequest, ::marsrover::CameraStreamResponse>* streamer) {
                       return this->StreamedGetCameraStream(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCameraStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCameraStream(::grpc::ServerContext* /*context*/, const ::marsrover::CameraStreamRequest* /*request*/, ::marsrover::CameraStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCameraStream(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marsrover::CameraStreamRequest,::marsrover::CameraStreamResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DriveForward<WithStreamedUnaryMethod_Reverse<WithStreamedUnaryMethod_TurnLeft<WithStreamedUnaryMethod_TurnRight<WithStreamedUnaryMethod_TurnOnSpot<WithStreamedUnaryMethod_RotatePeriscope<WithStreamedUnaryMethod_ControlHeadlights<WithStreamedUnaryMethod_ControlWheelLEDs<WithStreamedUnaryMethod_GetUltrasoundMeasurement<WithStreamedUnaryMethod_GetCameraStream<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DriveForward<WithStreamedUnaryMethod_Reverse<WithStreamedUnaryMethod_TurnLeft<WithStreamedUnaryMethod_TurnRight<WithStreamedUnaryMethod_TurnOnSpot<WithStreamedUnaryMethod_RotatePeriscope<WithStreamedUnaryMethod_ControlHeadlights<WithStreamedUnaryMethod_ControlWheelLEDs<WithStreamedUnaryMethod_GetUltrasoundMeasurement<WithStreamedUnaryMethod_GetCameraStream<Service > > > > > > > > > > StreamedService;
};

}  // namespace marsrover


#endif  // GRPC_mars_5frover_2eproto__INCLUDED
