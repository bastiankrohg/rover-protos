syntax = "proto3";

package marsrover;

service RoverService {
  // Commands
  // Locomotion
  rpc DriveForward(DriveRequest) returns (CommandResponse);
  rpc Reverse(DriveRequest) returns (CommandResponse);
  rpc TurnLeft(TurnRequest) returns (CommandResponse);
  rpc TurnRight(TurnRequest) returns (CommandResponse);
  rpc TurnOnSpot(TurnRequest) returns (CommandResponse);
  rpc StopMovement(StopRequest) returns (CommandResponse); // Added StopMovement

  // POV
  rpc RotatePeriscope(RotateRequest) returns (CommandResponse);

  rpc ControlHeadlights(LEDRequest) returns (CommandResponse);
  rpc ControlWheelLEDs(WheelLEDRequest) returns (CommandResponse);
  
  // Resource and Obstacle Mapping
  rpc MapResource(ResourceObstacleRequest) returns (CommandResponse);
  rpc MapObstacle(ResourceObstacleRequest) returns (CommandResponse);

  // List toggling
  rpc ToggleResourceList(EmptyRequest) returns (CommandResponse);
  rpc ToggleObstacleList(EmptyRequest) returns (CommandResponse);

  // Measurements
  rpc GetUltrasoundMeasurement(UltrasoundRequest) returns (UltrasoundResponse);

  // Camera
  // New service to get the camera stream URL
  rpc GetCameraStream(CameraStreamRequest) returns (CameraStreamResponse);
}

message DriveRequest {
  float speed = 1;
}

message StopRequest {} 

message TurnRequest {
  float angle = 1;
}

message RotateRequest {
  float angle = 1;
}

message ResourceObstacleRequest {
  float distance = 1; // Distance from the rover, as measured with the ultrasound sensor
  float size = 2;     // Optional size or width of the resource/obstacle
  string object = 3;   // Optional label to describe the detected item
}

message CommandResponse {
  bool success = 1;
  string message = 2;
}

// LED control requests
message LEDRequest {
  bool on = 1;  // true to turn on, false to turn off
}

message WheelLEDRequest {
  int32 wheel_number = 1;  // 1 to 6 for each wheel's LED
  bool on = 2;
}

// Measurement requests and responses
message UltrasoundRequest {}

message UltrasoundResponse {
  float distance = 1;
}

message CameraStreamRequest {}

message CameraStreamResponse {
  string stream_url = 1; // RTSP or HTTP stream URL
}

message EmptyRequest {}